package bot

import (
	"context"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –Æ–∑–µ—Ä —Å—Ç–µ–π—Ç—ã
const (
	StateStart                  = ""
	StateAwaitingLoginInput     = "awaiting_login_input"
	StateAwaitingOTP            = "awaiting_otp"
	StateLoggedIn               = "logged_in"
	StateGeneralInquiry         = "general_inquiry"
	StateAwaitingAgentIssuePost = "awaiting_agent_issue_post"
	StateAgentChat              = "agent_chat"
)

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä (—Ä–µ—é–∑–∞–±–∏–ª–∏—Ç–∏ –∞–≥–∞–∞)
var (
	// `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –í—Ö–æ–¥?`
	welcomeKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîé –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å"),
			tgbotapi.NewKeyboardButton("üîë –í—Ö–æ–¥"),
		),
	)

	// `–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞`
	loggedInKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üßæ –ú–æ–∏ —Å—á–µ—Ç–∞"),
			tgbotapi.NewKeyboardButton("üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å"),
			tgbotapi.NewKeyboardButton("üö™ –í—ã—Ö–æ–¥"),
		),
	)

	// `–ò–Ω–ª–∞–π–Ω: PDF, –û–ø–ª–∞—Ç–∞, –ê–≥–µ–Ω—Ç`
	billOptionsKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÑ –°–∫–∞—á–∞—Ç—å PDF", "bill_pdf"),
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "bill_pay"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "bill_agent"),
		),
	)

	// –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –†–ê–ì-–∑–∞–ø—Ä–æ—Å–æ–≤
	generalInquiryKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "end_general_inquiry"),
		),
	)

	// –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–æ–º
	agentChatKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_agent_chat"),
		),
	)
)

// –ë–æ—Ç —Å—Ç—Ä–∞–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–ø–µ–Ω–¥–µ–Ω—Å–∏–µ—Å
type Bot struct {
	api      *tgbotapi.BotAPI
	handlers *Handlers
	store    Store
}

// –ù—å—é –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
// –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç API, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
func New(api *tgbotapi.BotAPI, handlers *Handlers, store Store) *Bot {
	return &Bot{
		api:      api,
		handlers: handlers,
		store:    store,
	}
}

// –ù–∞—á–∏–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞
func (b *Bot) Start(ctx context.Context) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	log.Printf("Authorized on account %s, starting update loop...", b.api.Self.UserName)

	// –û—Å–Ω–æ–≤–Ω–æ–π –ª—É–ø –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		ctx := context.Background()
		var chatID int64
		var userID int64
		var text string
		var isCallback bool

		if update.CallbackQuery != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			isCallback = true
			callback := update.CallbackQuery
			chatID = callback.Message.Chat.ID
			userID = callback.From.ID
			text = callback.Data

			// –û—Ç–≤–µ—Ç, –æ–Ω –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–µ—Ä–µ–ª–∏–≤–∞–ª–∞—Å—å (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏)
			b.api.Request(tgbotapi.NewCallback(callback.ID, ""))
		} else {
			// –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä == —Ç—É–ø–∞ —Ç–µ–∫—Å—Ç
			chatID = update.Message.Chat.ID
			userID = update.Message.From.ID
			text = update.Message.Text
			// –ö–∞–∂–¥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è
			b.store.SaveMessage(ctx, userID, text)
		}

		// –î–æ—Å—Ç–∞–µ–º –∫—É—Ä—Ä–µ–Ω—Ç —Å—Ç–µ–π—Ç —Å —Ä–µ–¥–∏—Å–∞
		userState, err := b.store.GetUserState(ctx, userID)
		if err != nil {
			log.Printf("ERROR getting user state for %d: %v", userID, err)
			continue
		}

		// –ú–∞—Ö–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–µ–π—Ç–∞
		switch userState {
		case StateStart:
			b.handlers.HandleStartState(ctx, chatID, userID, text)
		case StateAwaitingLoginInput:
			b.handlers.HandleAwaitingLoginInput(ctx, chatID, userID, text)
		case StateAwaitingOTP:
			b.handlers.HandleAwaitingOTP(ctx, chatID, userID, text)
		case StateLoggedIn:
			b.handlers.HandleLoggedInState(ctx, chatID, userID, text, isCallback)
		case StateGeneralInquiry:
			b.handlers.HandleGeneralInquiryState(ctx, chatID, userID, text, isCallback)
		case StateAwaitingAgentIssuePost:
			b.handlers.HandleAgentIssue(ctx, chatID, userID, text)
		case StateAgentChat:
			b.handlers.HandleAgentChat(ctx, chatID, userID, text, isCallback)
		default:
			// –ù–µ–∑–Ω–∞–∫–æ–º—ã–π —Å—Ç–µ–π—Ç = –æ—à–∏–±–∫–∞, –Ω–æ —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
			b.store.SetUserState(ctx, userID, StateStart)
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.")
			msg.ReplyMarkup = welcomeKeyboard
			b.api.Send(msg)
		}
	}
}
