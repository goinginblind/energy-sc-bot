package main

import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –Æ–∑–µ—Ä —Å—Ç–µ–π—Ç—ã
const (
	StateStart                  = ""
	StateAwaitingLoginInput     = "awaiting_login_input"
	StateAwaitingOTP            = "awaiting_otp"
	StateLoggedIn               = "logged_in"
	StateGeneralInquiry         = "general_inquiry"
	StateAwaitingAgentIssuePost = "awaiting_agent_issue_post"
	StateAgentChat              = "agent_chat"
)

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä (—Ä–µ—é–∑–∞–±–∏–ª–∏—Ç–∏ –∞–≥–∞–∞)
var (
	// `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –í—Ö–æ–¥?`
	welcomeKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîé –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å"),
			tgbotapi.NewKeyboardButton("üîë –í—Ö–æ–¥"),
		),
	)

	// `–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞`
	loggedInKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üßæ –ú–æ–∏ —Å—á–µ—Ç–∞"),
			tgbotapi.NewKeyboardButton("üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å"),
			tgbotapi.NewKeyboardButton("üö™ –í—ã—Ö–æ–¥"),
		),
	)

	// `–ò–Ω–ª–∞–π–Ω: PDF, –û–ø–ª–∞—Ç–∞, –ê–≥–µ–Ω—Ç`
	billOptionsKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÑ –°–∫–∞—á–∞—Ç—å PDF", "bill_pdf"),
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "bill_pay"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "bill_agent"),
		),
	)

	// –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –†–ê–ì-–∑–∞–ø—Ä–æ—Å–æ–≤
	generalInquiryKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "end_general_inquiry"),
		),
	)

	// –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–æ–º
	agentChatKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_agent_chat"),
		),
	)
)

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, using environment variables")
	}
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("FATAL: TELEGRAM_TOKEN environment variable is not set")
	}

	store := NewRedisStore()
	defer store.Close()

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –û—Å–Ω–æ–≤–Ω–æ–π –ª—É–ø –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		ctx := context.Background()
		var chatID int64
		var userID int64
		var text string
		var isCallback bool

		if update.CallbackQuery != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			isCallback = true
			callback := update.CallbackQuery
			chatID = callback.Message.Chat.ID
			userID = callback.From.ID
			text = callback.Data

			// –û—Ç–≤–µ—Ç, –æ–Ω –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–µ—Ä–µ–ª–∏–≤–∞–ª–∞—Å—å (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏)
			bot.Request(tgbotapi.NewCallback(callback.ID, ""))
		} else {
			// –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä == —Ç—É–ø–∞ —Ç–µ–∫—Å—Ç
			chatID = update.Message.Chat.ID
			userID = update.Message.From.ID
			text = update.Message.Text
			// –ö–∞–∂–¥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è
			store.SaveMessage(ctx, userID, text)
		}

		// –î–æ—Å—Ç–∞–µ–º –∫—É—Ä—Ä–µ–Ω—Ç —Å—Ç–µ–π—Ç —Å —Ä–µ–¥–∏—Å–∞
		userState, err := store.GetUserState(ctx, userID)
		if err != nil {
			log.Printf("ERROR getting user state for %d: %v", userID, err)
			continue
		}

		// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		if text == "/start" {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ —é–∑–µ—Ä, —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Ñ–ª–∞–≥–∞
			loginStatus, _ := store.GetUserData(ctx, userID, "logged_in")
			if loginStatus == "true" {
				// –ï—Å–ª–∏ –¥–∞, —Ç–æ /start –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
				store.SetUserState(ctx, userID, StateLoggedIn)
				msg := tgbotapi.NewMessage(chatID, "–í—ã –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
				msg.ReplyMarkup = loggedInKeyboard
				bot.Send(msg)
			} else {
				// –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ /start –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
				store.SetUserState(ctx, userID, StateStart)
				handleStartState(ctx, bot, store, chatID, userID, text)
			}
			continue
		}

		// –ú–∞—Ö–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–µ–π—Ç–∞
		switch userState {
		case StateStart:
			handleStartState(ctx, bot, store, chatID, userID, text)
		case StateAwaitingLoginInput:
			handleAwaitingLoginInput(ctx, bot, store, chatID, userID, text)
		case StateAwaitingOTP:
			handleAwaitingOTP(ctx, bot, store, chatID, userID, text)
		case StateLoggedIn:
			handleLoggedInState(ctx, bot, store, chatID, userID, text, isCallback)
		case StateGeneralInquiry:
			handleGeneralInquiryState(ctx, bot, store, chatID, userID, text, isCallback)
		case StateAwaitingAgentIssuePost:
			handleAgentIssue(ctx, bot, store, chatID, userID, text)
		case StateAgentChat:
			handleAgentChat(ctx, bot, store, chatID, userID, text, isCallback)
		default:
			// –ù–µ–∑–Ω–∞–∫–æ–º—ã–π —Å—Ç–µ–π—Ç = –æ—à–∏–±–∫–∞, –Ω–æ —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
			store.SetUserState(ctx, userID, StateStart)
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.")
			msg.ReplyMarkup = welcomeKeyboard
			bot.Send(msg)
		}
	}
}

// —Ö—ç–Ω–¥–ª–µ—Ä –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞
func handleStartState(ctx context.Context, bot *tgbotapi.BotAPI, store Store, chatID, userID int64, text string) {
	switch text {
	case "üîë –í—Ö–æ–¥", "/login":
		store.SetUserState(ctx, userID, StateAwaitingLoginInput)
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email –¥–ª—è –≤—Ö–æ–¥–∞.")
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		bot.Send(msg)
	case "üîé –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å":
		store.SetUserState(ctx, userID, StateGeneralInquiry)
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.")
		bot.Send(msg)
	case "/start":
		msg := tgbotapi.NewMessage(chatID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
		msg.ReplyMarkup = welcomeKeyboard
		bot.Send(msg)
	default:
		// –ï—Å–ª–∏ —é–∑–µ—Ä —Å—Ä–∞–∑—É –ø–∏—à–µ—Ç –≤–æ–ø—Ä–æ—Å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –†–ê–ì
		store.SetUserState(ctx, userID, StateGeneralInquiry)
		handleGeneralInquiryState(ctx, bot, store, chatID, userID, text, false)
	}
}

// —Ö—ç–Ω–¥–ª–µ—Ä –∫–æ–≥–¥–∞ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –µ–º–∞–∏–ª
func handleAwaitingLoginInput(ctx context.Context, bot *tgbotapi.BotAPI, store Store, chatID, userID int64, text string) {
	// TODO: –≤–∞–ª–∏–¥–∞—Ü–∏—è —é–∑–µ—Ä –º–µ—Å–∞–∂ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ (–∏–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∫–∞) –æ–Ω–µ —Ç–∞–π–º –ø–∞—Å—Å–≤–æ—Ä–¥–∞
	// –ü–æ–∫–∞ –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç –∏–∑ 6 –∑–Ω–∞–∫–æ–≤.
	log.Printf("User %d submitted login identifier: %s", userID, text)

	otp := fmt.Sprintf("%06d", rand.Intn(1000000))
	store.SetUserData(ctx, userID, "otp", otp)
	store.SetUserState(ctx, userID, StateAwaitingOTP)

	log.Printf("STUB: Generated OTP for user %d: %s", userID, otp)
	bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.\n\n(–î–ª—è —Ç–µ—Å—Ç–∞: –≤–∞—à –∫–æ–¥ - %s)", otp)))
}

// –ö–æ–≥–¥–∞ –±–æ—Ç—É –Ω—É–∂–µ–Ω –æ—Ç–ø
func handleAwaitingOTP(ctx context.Context, bot *tgbotapi.BotAPI, store Store, chatID, userID int64, text string) {
	storedOTP, err := store.GetUserData(ctx, userID, "otp")
	if err != nil || storedOTP == "" {
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞."))
		store.SetUserState(ctx, userID, StateStart)
		return
	}

	if text == storedOTP {
		// –æ—Ç–ø –≤–µ—Ä–Ω—ã–π
		store.ClearUserData(ctx, userID)
		store.SetUserState(ctx, userID, StateLoggedIn)
		// **FIX: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω**
		store.SetUserData(ctx, userID, "logged_in", "true")

		// TODO: —Ç—É—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ø–∏ –≤—Ç–æ—Ä–æ–≥–æ data-—Å–µ—Ä–≤–∏—Å–∞, –≥–¥–µ –º—ã –∏–º–∏—Ç–∏—Ä—É–µ–º –ë–î —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ç–æ—Ä—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
		userName := "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!", userName))
		msg.ReplyMarkup = loggedInKeyboard
		bot.Send(msg)
	} else {
		// –æ—Ç–ø –Ω–µ–≤–µ—Ä–Ω—ã–π ü§Æ
		bot.Send(tgbotapi.NewMessage(chatID, "ü§Æ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start."))
	}
}

// —é–∑–µ—Ä –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è
func handleLoggedInState(ctx context.Context, bot *tgbotapi.BotAPI, store Store, chatID, userID int64, text string, isCallback bool) {
	// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ã
	if isCallback {
		switch text {
		case "bill_pdf":
			// TODO: –¥–æ—Å—Ç–∞–≤–∞—Ç—å –ø–¥—Ñ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
			bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—à PDF-—Å—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..."))
		case "bill_pay":
			// TODO: –æ–ø–ª–∞—Ç–∞? –í—Å–º, —è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É
			// –ø—É—Å—Ç—å –æ–Ω–∏ —É–∂–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –¥–µ–ª–∞—é—Ç —É –º–µ–Ω—è –≤–∞—â–µ –Ω–µ—Ç –¥–µ–Ω–µ–≥ –∫–∞–∫ –∫–æ–Ω—Ü–µ–ø—Ç–∞ –ª–æ–ª
			bot.Send(tgbotapi.NewMessage(chatID, "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã..."))
		case "bill_agent":
			store.SetUserState(ctx, userID, StateAwaitingAgentIssuePost)
			bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç—Ç–∏–º —Å—á–µ—Ç–æ–º. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
		}
		return
	}

	// –î—Ä—É–≥–∏–µ –∫–ª–∞–≤—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –º–µ—Å–∞–∂
	switch text {
	case "üßæ –ú–æ–∏ —Å—á–µ—Ç–∞":
		// TODO: —Ç—É—Ç –Ω—É–∂–Ω–æ —Ñ–µ—Ç—á–∏—Ç—å —Å –∞–ø–∏ data-—Å–µ—Ä–≤–∏—Å–∞.
		summary := "–°—á–µ—Ç #12345 –æ—Ç 24.07.2025\n–°—É–º–º–∞: $420.69\n–°—Ç–∞—Ç—É—Å: –ù–µ –æ–ø–ª–∞—á–µ–Ω"
		msg := tgbotapi.NewMessage(chatID, summary)
		msg.ReplyMarkup = billOptionsKeyboard
		bot.Send(msg)
	case "üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º":
		store.SetUserState(ctx, userID, StateAwaitingAgentIssuePost)
		bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."))
	case "‚ùì –ó–∞–¥–∞—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å":
		store.SetUserState(ctx, userID, StateGeneralInquiry)
		bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start."))
	case "üö™ –í—ã—Ö–æ–¥", "/logout":
		// **FIX: –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ, –≤–∫–ª—é—á–∞—è —Ñ–ª–∞–≥ "logged_in"**
		store.ClearUserData(ctx, userID)
		store.SetUserState(ctx, userID, StateStart)
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
		msg.ReplyMarkup = welcomeKeyboard
		bot.Send(msg)
	default:
		bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."))
	}
}

// –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ —Ö–µ—Ä–Ω–∏ –∏ –ª–æ–≥–∏–Ω–æ–≤ (–ê–Ω—Ç–æ—Ö–∞?)
func handleGeneralInquiryState(ctx context.Context, bot *tgbotapi.BotAPI, store Store, chatID, userID int64, text string, isCallback bool) {
	// **FIX: –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —é–∑–µ—Ä –∑–∞–ª–æ–≥–∏–Ω–µ–Ω**
	if isCallback && text == "end_general_inquiry" {
		loginStatus, _ := store.GetUserData(ctx, userID, "logged_in")
		if loginStatus == "true" {
			// –ï—Å–ª–∏ –±—ã–ª –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
			store.SetUserState(ctx, userID, StateLoggedIn)
			msg := tgbotapi.NewMessage(chatID, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
			msg.ReplyMarkup = loggedInKeyboard
			bot.Send(msg)
		} else {
			// –ï—Å–ª–∏ –Ω–µ –±—ã–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			store.SetUserState(ctx, userID, StateStart)
			msg := tgbotapi.NewMessage(chatID, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
			msg.ReplyMarkup = welcomeKeyboard
			bot.Send(msg)
		}
		return
	}

	// –ù–µ –¥–∞–µ–º –∫–æ–º–∞–Ω–¥–∞–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Ö–æ–¥–∏—Ç—å –≤ –†–ê–ì
	if !isCallback && (text == "üîé –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å" || text == "üîë –í—Ö–æ–¥") {
		store.SetUserState(ctx, userID, StateStart)
		handleStartState(ctx, bot, store, chatID, userID, text)
		return
	}

	// TODO: –≤—ã–∑–æ–≤ –†–ê–ì —á/–∑ gRPC..
	log.Printf("STUB: RAG query from user %d: %s", userID, text)
	ragAnswer := "–≠—Ç–æ –º–æ–≥ –±—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RAG-–º–æ–¥–µ–ª—å—é, –Ω–æ –±–æ—Ç –ø–æ–∫–∞ —Ç–∞–∫ –Ω–µ —É–º–µ–µ—Ç (—è —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—á–∞–ª gRPC —à—Ç—É–∫—É)."

	msg := tgbotapi.NewMessage(chatID, ragAnswer)
	msg.ReplyMarkup = generalInquiryKeyboard
	bot.Send(msg)
}

// –ö–æ–≥–¥–∞ –±–æ—Ç –∂–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º—è—è—Å–Ω–æ–º—É –º–µ—à–∫—É (—Å–ª—É–∂–±–µ –ø.)
func handleAgentIssue(ctx context.Context, bot *tgbotapi.BotAPI, store Store, chatID, userID int64, text string) {
	// TODO: –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è —Ç–∏–∫–µ—Ç –¥–ª—è –∂–∏—Ä—ã –∏–ª–∏ —á–µ–≥–æ-—Ç–æ –≤—Ä–æ–¥–µ —Ç–æ–≥–æ
	log.Printf("STUB: Creating support ticket for user %d. Issue: %s", userID, text)

	store.SetUserState(ctx, userID, StateAgentChat)
	msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç—É. –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≥–µ–Ω—Ç—É.\n\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
	msg.ReplyMarkup = agentChatKeyboard
	bot.Send(msg)
}

// –í–æ—Ç –Ω–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
func handleAgentChat(ctx context.Context, bot *tgbotapi.BotAPI, store Store, chatID, userID int64, text string, isCallback bool) {
	if isCallback && text == "end_agent_chat" {
		// –¢—É—Ç –Ω–∞–¥–æ –±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ —á—Ç–æ —á–∞—Ç –∑–∞–≤–µ—Ä—à–∏–ª–∏ (–Ω–æ –ø–æ-–º–æ–µ–º—É –æ–≤–µ—Ä–∫–∏–ª–ª)
		bot.Send(tgbotapi.NewMessage(chatID, "–ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é."))

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —é–∑–µ—Ä –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
		loginStatus, _ := store.GetUserData(ctx, userID, "logged_in")
		if loginStatus == "true" {
			store.SetUserState(ctx, userID, StateLoggedIn)
			msg := tgbotapi.NewMessage(chatID, "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
			msg.ReplyMarkup = loggedInKeyboard
			bot.Send(msg)
		} else {
			// –≠—Ç–æ—Ç —Å–ª—É—á–∞–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –ø–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
			store.SetUserState(ctx, userID, StateStart)
			msg := tgbotapi.NewMessage(chatID, "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
			msg.ReplyMarkup = welcomeKeyboard
			bot.Send(msg)
		}
		return
	}

	// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–ª–ª–±—ç–∫, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
	if !isCallback {
		// TODO: –ø–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏...
		log.Printf("STUB: Forwarding message to agent from chat %d: %s", chatID, text)
	}
}
