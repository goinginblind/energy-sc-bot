// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/rag.proto

package ragpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RAGService_GetAnswerToQuery_FullMethodName   = "/rag.RAGService/GetAnswerToQuery"
	RAGService_ClassifyQuery_FullMethodName      = "/rag.RAGService/ClassifyQuery"
	RAGService_HumanQueryToPrompt_FullMethodName = "/rag.RAGService/HumanQueryToPrompt"
)

// RAGServiceClient is the client API for RAGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RAGServiceClient interface {
	// Главный энтри поинт
	GetAnswerToQuery(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error)
	// Классификация запроса пользователя
	ClassifyQuery(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error)
	// Улучшаетль промпта
	HumanQueryToPrompt(ctx context.Context, in *HumanQueryRequest, opts ...grpc.CallOption) (*HumanQueryResponse, error)
}

type rAGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRAGServiceClient(cc grpc.ClientConnInterface) RAGServiceClient {
	return &rAGServiceClient{cc}
}

func (c *rAGServiceClient) GetAnswerToQuery(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnswerResponse)
	err := c.cc.Invoke(ctx, RAGService_GetAnswerToQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) ClassifyQuery(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassifyResponse)
	err := c.cc.Invoke(ctx, RAGService_ClassifyQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) HumanQueryToPrompt(ctx context.Context, in *HumanQueryRequest, opts ...grpc.CallOption) (*HumanQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HumanQueryResponse)
	err := c.cc.Invoke(ctx, RAGService_HumanQueryToPrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RAGServiceServer is the server API for RAGService service.
// All implementations must embed UnimplementedRAGServiceServer
// for forward compatibility.
type RAGServiceServer interface {
	// Главный энтри поинт
	GetAnswerToQuery(context.Context, *AnswerRequest) (*AnswerResponse, error)
	// Классификация запроса пользователя
	ClassifyQuery(context.Context, *ClassifyRequest) (*ClassifyResponse, error)
	// Улучшаетль промпта
	HumanQueryToPrompt(context.Context, *HumanQueryRequest) (*HumanQueryResponse, error)
	mustEmbedUnimplementedRAGServiceServer()
}

// UnimplementedRAGServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRAGServiceServer struct{}

func (UnimplementedRAGServiceServer) GetAnswerToQuery(context.Context, *AnswerRequest) (*AnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswerToQuery not implemented")
}
func (UnimplementedRAGServiceServer) ClassifyQuery(context.Context, *ClassifyRequest) (*ClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyQuery not implemented")
}
func (UnimplementedRAGServiceServer) HumanQueryToPrompt(context.Context, *HumanQueryRequest) (*HumanQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HumanQueryToPrompt not implemented")
}
func (UnimplementedRAGServiceServer) mustEmbedUnimplementedRAGServiceServer() {}
func (UnimplementedRAGServiceServer) testEmbeddedByValue()                    {}

// UnsafeRAGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RAGServiceServer will
// result in compilation errors.
type UnsafeRAGServiceServer interface {
	mustEmbedUnimplementedRAGServiceServer()
}

func RegisterRAGServiceServer(s grpc.ServiceRegistrar, srv RAGServiceServer) {
	// If the following call pancis, it indicates UnimplementedRAGServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RAGService_ServiceDesc, srv)
}

func _RAGService_GetAnswerToQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).GetAnswerToQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_GetAnswerToQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).GetAnswerToQuery(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_ClassifyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).ClassifyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_ClassifyQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).ClassifyQuery(ctx, req.(*ClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_HumanQueryToPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).HumanQueryToPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_HumanQueryToPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).HumanQueryToPrompt(ctx, req.(*HumanQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RAGService_ServiceDesc is the grpc.ServiceDesc for RAGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RAGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rag.RAGService",
	HandlerType: (*RAGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnswerToQuery",
			Handler:    _RAGService_GetAnswerToQuery_Handler,
		},
		{
			MethodName: "ClassifyQuery",
			Handler:    _RAGService_ClassifyQuery_Handler,
		},
		{
			MethodName: "HumanQueryToPrompt",
			Handler:    _RAGService_HumanQueryToPrompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rag.proto",
}
