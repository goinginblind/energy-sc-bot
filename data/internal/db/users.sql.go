// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (telegram_id, phone, email)
VALUES ($1, $2, $3)
RETURNING id, telegram_id, phone, email, created_at
`

type CreateUserParams struct {
	TelegramID int64
	Phone      sql.NullString
	Email      sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.TelegramID, arg.Phone, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, telegram_id, phone, email, created_at
  FROM users
 WHERE email = $1
 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, telegram_id, phone, email, created_at
  FROM users
 WHERE phone = $1
 LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const upsertUserByContact = `-- name: UpsertUserByContact :one
INSERT INTO users (telegram_id, phone, email)
VALUES ($1, $2, $3)
ON CONFLICT (phone, email) DO UPDATE
  SET telegram_id = COALESCE(EXCLUDED.telegram_id, users.telegram_id),
      phone       = COALESCE(EXCLUDED.phone, users.phone),
      email       = COALESCE(EXCLUDED.email, users.email)
RETURNING id, telegram_id, phone, email, created_at
`

type UpsertUserByContactParams struct {
	TelegramID int64
	Phone      sql.NullString
	Email      sql.NullString
}

func (q *Queries) UpsertUserByContact(ctx context.Context, arg UpsertUserByContactParams) (User, error) {
	row := q.db.QueryRowContext(ctx, upsertUserByContact, arg.TelegramID, arg.Phone, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
