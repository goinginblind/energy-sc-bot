// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bills.sql

package db

import (
	"context"
)

const getBillByID = `-- name: GetBillByID :one
SELECT id, user_id, pdf_url, amount, status, issued_at, due_date
  FROM bills
 WHERE id = $1 AND user_id = $2
`

type GetBillByIDParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetBillByID(ctx context.Context, arg GetBillByIDParams) (Bill, error) {
	row := q.db.QueryRowContext(ctx, getBillByID, arg.ID, arg.UserID)
	var i Bill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PdfUrl,
		&i.Amount,
		&i.Status,
		&i.IssuedAt,
		&i.DueDate,
	)
	return i, err
}

const getBillsByUserID = `-- name: GetBillsByUserID :many
SELECT id, user_id, pdf_url, amount, status, issued_at, due_date
  FROM bills
 WHERE user_id = $1
 ORDER BY issued_at DESC
`

func (q *Queries) GetBillsByUserID(ctx context.Context, userID int64) ([]Bill, error) {
	rows, err := q.db.QueryContext(ctx, getBillsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bill
	for rows.Next() {
		var i Bill
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PdfUrl,
			&i.Amount,
			&i.Status,
			&i.IssuedAt,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
