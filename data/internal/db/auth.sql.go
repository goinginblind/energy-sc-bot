// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO otp_requests (user_id, otp_code, expires_at)
VALUES ($1, $2, now() + interval '5 minutes')
RETURNING id, user_id, otp_code, expires_at, created_at
`

type CreateOTPParams struct {
	UserID  int64
	OtpCode string
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (OtpRequest, error) {
	row := q.db.QueryRowContext(ctx, createOTP, arg.UserID, arg.OtpCode)
	var i OtpRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, token, expires_at)
VALUES ($1, $2, now() + interval '3 hours')
RETURNING id, user_id, token, expires_at, created_at
`

type CreateSessionParams struct {
	UserID int64
	Token  string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.Token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOTP = `-- name: DeleteOTP :exec
DELETE FROM otp_requests WHERE user_id = $1
`

func (q *Queries) DeleteOTP(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOTP, userID)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, expires_at, created_at FROM sessions WHERE token = $1 AND expires_at > now()
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getValidOTP = `-- name: GetValidOTP :one
SELECT id, user_id, otp_code, expires_at, created_at 
FROM otp_requests
WHERE user_id = $1
   AND otp_code = $2
   AND expires_at > now()
`

type GetValidOTPParams struct {
	UserID  int64
	OtpCode string
}

func (q *Queries) GetValidOTP(ctx context.Context, arg GetValidOTPParams) (OtpRequest, error) {
	row := q.db.QueryRowContext(ctx, getValidOTP, arg.UserID, arg.OtpCode)
	var i OtpRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
